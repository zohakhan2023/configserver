name: Deploy Application Deployment

on:
  push:
    branches:
      - dev
jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest

    strategy:
      matrix:
        java-version: [ '17' ]  # Specify the Java version

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up OpenJDK ${{ matrix.java-version }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'temurin'  # 'temurin' is the recommended OpenJDK distribution

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Run tests with test profile
        run: mvn test -Dspring.profiles.active=test
      - name: Install dependencies and test
        run: mvn clean install

      - name: Package application
        run: mvn package -DskipTests=true

      - name: Archive the artifact
        uses: actions/upload-artifact@v3
        with:
          name: springboot-app
          path: target/*.jar
  Containerize:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up kubectl
        uses: kubernetes-sigs/setup-kubectl@v1
        with:
          version: '1.24.0'

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --name my-cluster --region ${{ secrets.AWS_REGION }}

      - name: Deploy application to Kubernetes
        run: |
          kubectl apply -f k8s/

      - name: Install Istio
        run: |
          curl -L https://istio.io/downloadIstio | sh -
          cd istio-*
          export PATH=$PWD/bin:$PATH
          istioctl install --set profile=demo -y

      - name: Apply Istio configurations
        run: |
          kubectl apply -f istio/

      - name: Monitor deployment
        run: |
          kubectl rollout status deployment/my-app
